[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tree3d authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tyler Morgan-Wall. Author, copyright holder, maintainer. Samantha Miller. Author, copyright holder. Agatha Czekajlo. Author, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan-Wall T, Miller S, Czekajlo (2023). tree3d: 3D Tree Models. R package version 0.1.0, https://tylermorganwall.github.io/tree3d/.","code":"@Manual{,   title = {tree3d: 3D Tree Models},   author = {Tyler Morgan-Wall and Samantha Miller and Agatha Czekajlo},   year = {2023},   note = {R package version 0.1.0},   url = {https://tylermorganwall.github.io/tree3d/}, }"},{"path":"/index.html","id":"tree3d-3d-tree-models","dir":"","previous_headings":"","what":"3D Tree Models","title":"3D Tree Models","text":"tree3d R package provides highly customizable 3D tree models data visualization 3D scene creation. tree3d allows generate tree models OBJ files, can easily integrated data visualization, animation, 3D rendering workflows.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"3D Tree Models","text":"Variety tree models: Includes planar solid tree models. Multiple crown types: Provides wide range crown types, including: columnar, oval, palm, pyramidal, rounded, spreading, vase, weeping. type offers unique visual aesthetic represent different types trees. Customizable dimensions color: Allows adjust diameter, height, color tree’s crown trunk individually. flexibility allows customize tree model specific use case.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"3D Tree Models","text":"tree3d can currently installed Github.","code":"install.packages(\"remotes\") remotes::install_github(\"tylermorganwall/tree3d\")"},{"path":[]},{"path":[]},{"path":"/reference/get_crown_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a 3D Crown File — get_crown_file","title":"Get a 3D Crown File — get_crown_file","text":"Generate specific 3D representation tree crown, given parameters type tree crown, desired level detail resolution, whether offset crown align trunk origin.","code":""},{"path":"/reference/get_crown_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a 3D Crown File — get_crown_file","text":"","code":"get_crown_file(   tree = \"oval\",   resolution = \"medium\",   offset_origin = TRUE,   solid = FALSE )"},{"path":"/reference/get_crown_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a 3D Crown File — get_crown_file","text":"tree Default \"rounded\". Crown type. Full list options: \"columnar\" \"pyramidal1\" \"pyramidal2\" \"oval\" \"palm\" \"rounded\" \"spreading1\" \"spreading2\" \"vase\" \"weeping\" resolution Default \"medium\". Level detail tree mesh. options: \"low\" \"medium\" \"high offset_origin Default TRUE. Whether offset crown bottom tree exactly origin, aligning trunk. solid Default FALSE. Whether crown solid mesh (TRUE), collection flat 2D planes (FALSE).","code":""},{"path":"/reference/get_crown_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a 3D Crown File — get_crown_file","text":"Filename OBJ file (.txt file)","code":""},{"path":"/reference/get_crown_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a 3D Crown File — get_crown_file","text":"","code":"#Load an arrow OBJ get_crown_file(tree = \"rounded\", resolution = \"high\") #> [1] \"/home/runner/work/_temp/Library/tree3d/extdata/highres/rounded_clean_offset.txt\""},{"path":"/reference/get_default_tree_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the default color for a tree — get_default_tree_color","title":"Get the default color for a tree — get_default_tree_color","text":"Get default color tree","code":""},{"path":"/reference/get_default_tree_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the default color for a tree — get_default_tree_color","text":"","code":"get_default_tree_color(crown_type)"},{"path":"/reference/get_default_tree_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the default color for a tree — get_default_tree_color","text":"crown_type Crown type. Full list options: \"columnar\" \"pyramidal1\" \"pyramidal2\" \"oval\" \"palm\" \"rounded\" \"spreading1\" \"spreading2\" \"vase\" \"weeping\"","code":""},{"path":"/reference/get_default_tree_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the default color for a tree — get_default_tree_color","text":"Hex color","code":""},{"path":"/reference/get_flat_crown_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Flat 3D Crown File — get_flat_crown_file","title":"Get a Flat 3D Crown File — get_flat_crown_file","text":"Generate specific 3D representation planar tree crown, given parameters type tree crown, desired level detail resolution, whether offset crown align trunk origin.","code":""},{"path":"/reference/get_flat_crown_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Flat 3D Crown File — get_flat_crown_file","text":"","code":"get_flat_crown_file(   tree = \"rounded\",   resolution = \"medium\",   offset_origin = TRUE )"},{"path":"/reference/get_flat_crown_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Flat 3D Crown File — get_flat_crown_file","text":"tree Default \"rounded\". Crown type. Full list options: \"columnar\" \"pyramidal1\" \"pyramidal2\" \"oval\" \"palm\" \"rounded\" \"spreading1\" \"spreading2\" \"vase\" \"weeping\" resolution Default \"medium\". Level detail tree mesh. options: \"low\" \"medium\" \"high offset_origin Default TRUE. Whether offset crown bottom tree exactly origin, aligning trunk.","code":""},{"path":"/reference/get_flat_crown_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Flat 3D Crown File — get_flat_crown_file","text":"Filename OBJ file (.txt file)","code":""},{"path":"/reference/get_flat_crown_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a Flat 3D Crown File — get_flat_crown_file","text":"","code":"#Load an arrow OBJ get_flat_crown_file(tree = \"rounded\", resolution = \"high\") #> [1] \"/home/runner/work/_temp/Library/tree3d/extdata/highres/rounded_clean_offset.txt\""},{"path":"/reference/get_solid_crown_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Solid 3D Crown File — get_solid_crown_file","title":"Get a Solid 3D Crown File — get_solid_crown_file","text":"Generate specific 3D representation tree crown, given parameters type tree crown, desired level detail resolution, whether offset crown align trunk origin.","code":""},{"path":"/reference/get_solid_crown_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Solid 3D Crown File — get_solid_crown_file","text":"","code":"get_solid_crown_file(   tree = \"oval\",   resolution = \"medium\",   offset_origin = TRUE )"},{"path":"/reference/get_solid_crown_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Solid 3D Crown File — get_solid_crown_file","text":"tree Default \"oval\". Crown type. Full list options: \"columnar\" \"pyramidal1\" \"pyramidal2\" \"oval\" \"spreading1\" \"weeping\" resolution Default \"medium\". Level detail tree mesh. options: \"low\" \"medium\" \"high offset_origin Default TRUE. Whether offset crown bottom tree exactly origin, aligning trunk.","code":""},{"path":"/reference/get_solid_crown_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Solid 3D Crown File — get_solid_crown_file","text":"Filename OBJ file (.txt file)","code":""},{"path":"/reference/get_solid_crown_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a Solid 3D Crown File — get_solid_crown_file","text":"","code":"#Load an arrow OBJ get_solid_crown_file(tree = \"oval\", resolution = \"high\") #> [1] \"/home/runner/work/_temp/Library/tree3d/extdata/highres/oval_crown_clean_offset.txt\""},{"path":"/reference/get_tree_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Tree Data — get_tree_data","title":"Get Tree Data — get_tree_data","text":"function retrieves data frame tree default data.","code":""},{"path":"/reference/get_tree_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Tree Data — get_tree_data","text":"","code":"get_tree_data()"},{"path":"/reference/get_tree_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Tree Data — get_tree_data","text":"Returns data frame.","code":""},{"path":"/reference/get_tree_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Tree Data — get_tree_data","text":"","code":"# Fetch the tree data frame. get_tree_data() #>          name solid_available trunk_color tree_color #> 1    columnar            TRUE     #8C6F5B    #A2C683 #> 2  pyramidal1            TRUE     #8C6F5B    #066038 #> 3  pyramidal2            TRUE     #8C6F5B    #447765 #> 4        oval            TRUE     #8C6F5B    #CBD362 #> 5        palm           FALSE     #8C6F5B    #CCB471 #> 6     rounded           FALSE     #8C6F5B    #7CB262 #> 7  spreading1            TRUE     #8C6F5B    #DB8952 #> 8  spreading2           FALSE     #8C6F5B    #E0A854 #> 9        vase           FALSE     #8C6F5B    #75C165 #> 10    weeping            TRUE     #8C6F5B    #AECCB1"},{"path":"/reference/get_trunk_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Trunk File — get_trunk_file","title":"Get Trunk File — get_trunk_file","text":"function retrieves trunk OBJ file. trunk OBJ file can used create tree trunk 3D scene. function option scale trunk model based radius.","code":""},{"path":"/reference/get_trunk_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Trunk File — get_trunk_file","text":"","code":"get_trunk_file(scaled = TRUE, offset = TRUE)"},{"path":"/reference/get_trunk_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Trunk File — get_trunk_file","text":"scaled Default TRUE. parameter determines whether trunk model scaled radius 0.1 1. TRUE, trunk model scaled; otherwise, use original size. offset Default TRUE. parameter determines whether trunk model offset start origin, centered origin (FALSE).","code":""},{"path":"/reference/get_trunk_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Trunk File — get_trunk_file","text":"Returns filename selected OBJ file (.txt file) tree trunk. file can used create tree trunk models 3D scene.","code":""},{"path":"/reference/get_trunk_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Trunk File — get_trunk_file","text":"","code":"# Fetch an trunk OBJ path get_trunk_file() #> [1] \"/home/runner/work/_temp/Library/tree3d/extdata/trunk/trunk_clean_scaled_offset.txt\""},{"path":"/reference/tree_mesh.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Tree Mesh — tree_mesh","title":"Generate a Tree Mesh — tree_mesh","text":"function generates tree model transforms ray_mesh object OBJ file. tree model consists two main parts: crown (leafy part) trunk. parts can customized according range preset types, well full control tree's colors dimensions. tree model can positioned, scaled, rotated 3D space.","code":""},{"path":"/reference/tree_mesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Tree Mesh — tree_mesh","text":"","code":"tree_mesh(   crown_type = \"oval\",   position = c(0, 0, 0),   angle = 0,   solid = FALSE,   resolution = \"medium\",   filename = NULL,   crown_height = 1,   crown_diameter = 1,   trunk_height = 0.5,   trunk_diameter = 0.1,   crown_color = NA,   trunk_color = \"#8C6F5B\",   diffuse_intensity = 1,   ambient_intensity = 0.2 )"},{"path":"/reference/tree_mesh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Tree Mesh — tree_mesh","text":"crown_type Default \"oval\". Crown type (leafy part tree). Full list options: position Default c(0,0,0). length-3 numeric vector specifying X, Y, Z coordinates tree mesh 3D space. angle Default 0. Amount rotation around y-axis tree. solid Default FALSE. Whether crown solid mesh (TRUE), collection flat 2D planes (FALSE). resolution Default \"medium\". String indicating level detail tree mesh. options: \"low\" \"medium\" \"high filename Default NULL. File name OBJ file, saving mesh local file. crown_height Default 1. numeric value setting height crown. crown_diameter Default 1. numeric value setting diameter crown. trunk_height Default 1. numeric value setting height trunk. trunk_diameter Default 0.1. numeric value setting diameter trunk. crown_color Default NA, use default crown type. string specifying hex code crown color. trunk_color Default \"#8C6F5B\". string specifying hex code trunk color. diffuse_intensity Default 1.0. numeric value controlling amount diffuse (shaded) color included model. ambient_intensity Default 0.2. numeric value controlling amount ambient (constant) color included model.","code":""},{"path":"/reference/tree_mesh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Tree Mesh — tree_mesh","text":"ray_mesh list object","code":""},{"path":"/reference/tree_mesh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Tree Mesh — tree_mesh","text":"","code":"#Load a tree and render it library(rayvertex) render_tree_example = function(example_tree_mesh) {  example_tree_mesh |>    add_shape(xz_rect_mesh(c(0,0,-9),                           material = material_list(diffuse=\"tan\",                           ambient = \"grey\", diffuse_intensity = 0.7,                           ambient_intensity = 0.6),                           scale=25)) |>    rasterize_scene(lookat=c(0,0.75,0),                    light_info = directional_light(c(0.3,1,1), intensity = 0.7),                    lookfrom=c(0,3,10),                    fov=10,                    shadow_map_dims = 2,                    shadow_map_bias = 0.0005,                    background = \"lightblue\") } #Render a basic 3D crown tree_mesh(\"columnar\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example()   #Render the 2D planar version tree_mesh(\"columnar\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()   #Change the trunk and crown dimensions tree_mesh(\"columnar\",          trunk_height = 0.25,          trunk_diameter = 0.05,          crown_height = 1,          crown_diameter = 0.5,          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example()   #Change the crown and trunk color tree_mesh(\"columnar\",          solid = TRUE,          crown_color = \"orange\",          trunk_color = \"tan\",          ambient_intensity = 0.3) |>  render_tree_example()   #Render different tree types, both 2D and 3D versions tree_mesh(\"columnar\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"columnar\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"pyramidal1\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"pyramidal1\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"pyramidal2\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"pyramidal2\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"weeping\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"weeping\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"spreading1\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"spreading1\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"oval\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"oval\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"palm\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"rounded\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"spreading2\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()   tree_mesh(\"vase\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example()"},{"path":"/reference/write_tree_to_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Tree to OBJ — write_tree_to_obj","title":"Write Tree to OBJ — write_tree_to_obj","text":"Export tree mesh OBJ file use 3D programs","code":""},{"path":"/reference/write_tree_to_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Tree to OBJ — write_tree_to_obj","text":"","code":"write_tree_to_obj(tree_mesh, filename, materials = TRUE, fileext = \".obj\")"},{"path":"/reference/write_tree_to_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Tree to OBJ — write_tree_to_obj","text":"tree_mesh Tree mesh. filename Filename OBJ file. file extension included, automatically added. materials Default TRUE. Whether also write material (MTL) file. fileext Default \".obj\". File extension added present.","code":""},{"path":"/reference/write_tree_to_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Tree to OBJ — write_tree_to_obj","text":"None","code":""},{"path":"/reference/write_tree_to_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Tree to OBJ — write_tree_to_obj","text":"","code":"#Save tree mesh to file tempfileloc = tempfile() write_tree_to_obj(tree_mesh(), filename = tempfileloc)"}]
