[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tree3d authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tyler Morgan-Wall. Author, copyright holder, maintainer. Samantha Miller. Author, copyright holder. Agatha Czekajlo. Author, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan-Wall T, Miller S, Czekajlo (2023). tree3d: 3D Tree Models. R package version 0.1.2, https://tylermorganwall.github.io/tree3d/.","code":"@Manual{,   title = {tree3d: 3D Tree Models},   author = {Tyler Morgan-Wall and Samantha Miller and Agatha Czekajlo},   year = {2023},   note = {R package version 0.1.2},   url = {https://tylermorganwall.github.io/tree3d/}, }"},{"path":"/index.html","id":"tree3d-3d-tree-models","dir":"","previous_headings":"","what":"3D Tree Models","title":"3D Tree Models","text":"tree3d R package provides highly customizable 3D tree models data visualization 3D scene creation. tree3d allows generate tree models OBJ files, can easily integrated data visualization, animation, 3D rendering workflows.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"3D Tree Models","text":"Variety tree models: Includes planar solid tree models. Multiple crown types: Provides wide range crown types, including: columnar, oval, palm, pyramidal, rounded, spreading, vase, weeping. type offers unique visual aesthetic represent different types trees. Customizable dimensions color: Allows adjust diameter, height, color tree’s crown trunk individually. flexibility allows customize tree model specific use case.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"3D Tree Models","text":"tree3d can currently installed Github.","code":"install.packages(\"remotes\") remotes::install_github(\"tylermorganwall/tree3d\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"3D Tree Models","text":"Let’s load sandbox data included Github repository. unzip file, load shapefiles R using {sf}. Now data loaded, let’s generate 3D map rayshader. load  Now 3D map generated, let’s add custom trees using rayshader’s render_trees() function. tree3d provides get_crown_file() get_trunk_file(), allows access separate 3D models included package. Passing model separately gives full control size, shape, colors trees.  can also generate high quality renders trees using rayshader:. , use solid models.   can also extract 3D tree information lidar data using lidR package use data generate 3D trees. , ’ll use random trees package fill scene.","code":"library(tree3d) library(sf) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE library(terra) #> terra 1.7.18 library(rayshader)  # Download the sample data temp_download = tempfile(fileext = \".zip\") download.file(\"https://github.com/tylermorganwall/tree3d/raw/main/inst/extdata/tree3d_sandbox_data.zip\", temp_download)  # Unzip and get directory unzip(temp_download, exdir = tempdir()) zipdir = paste0(tempdir(), .Platform$file.sep,                  \"sandbox_data\", .Platform$file.sep)  # Load all files poly_boundary = sf::st_read(paste0(zipdir, \"Area_Boundary_subset.shp\"), quiet = TRUE) baseline_tree = sf::st_read(paste0(zipdir, \"Baseline_Trees_Z_clip.shp\"), quiet = TRUE) building_baseline = sf::st_read(paste0(zipdir, \"Buildings_Baseline_2020_Z_clip.shp\"), quiet = TRUE) parcels = sf::st_read(paste0(zipdir, \"Parcels_2020_clip.shp\"), quiet = TRUE)  dem = terra::rast(paste0(zipdir, \"DEM_2013_subset_zero.tif\"))  # Inspect the tree data head(baseline_tree) #> Simple feature collection with 6 features and 8 fields #> Geometry type: POINT #> Dimension:     XYZ #> Bounding box:  xmin: 493801.7 ymin: 5452079 xmax: 493951.7 ymax: 5452181 #> z_range:       zmin: 7.19 zmax: 16.25 #> Projected CRS: NAD83 / UTM zone 10N #>             Species Height      Type Location MatureSize Diameter  CrownType #> 1 Prunus cerasifera   7.19 Deciduous   Street      Small      4.6 spreading1 #> 2  Acer x freemanii  16.25 Deciduous   Street      Large     12.1       oval #> 3  Acer x freemanii  16.22 Deciduous   Street      Large      7.5       oval #> 4    Fraxinus ornus   8.09 Deciduous   Street     Medium      4.1       oval #> 5  Parrotia persica   9.20 Deciduous   Street     Medium      4.1 spreading1 #> 6       Sorbus aria   9.67 Deciduous   Street     Medium      5.3       oval #>   Color                       geometry #> 1  <NA> POINT Z (493937.4 5452179 7... #> 2  <NA> POINT Z (493951.7 5452079 1... #> 3  <NA> POINT Z (493831.7 5452181 1... #> 4  <NA> POINT Z (493801.7 5452167 8... #> 5  <NA> POINT Z (493845.4 5452181 9.2) #> 6  <NA> POINT Z (493898.5 5452165 9... #Use rayshader to convert the DEM to a matrix and generate a 3D mesh dem_mat = raster_to_matrix(dem) dem_mat |>   constant_shade(\"#6dbd83\") |>   add_overlay(generate_polygon_overlay(poly_boundary, extent = ext(dem),                                        heightmap = dem_mat,                                        palette = \"#bcebc9\")) |>   add_overlay(generate_polygon_overlay(parcels, extent = ext(dem),                                        heightmap = dem_mat,                                        palette = \"#afe0bd\")) |>   plot_3d(dem_mat, background = \"lightblue\", windowsize = 800)  #Render the buildings as extruded polygons render_polygons(building_baseline,                  extent = ext(dem),                  data_column_top = \"height_ag\",                  clear_previous = TRUE,                  color = \"white\",                  heightmap = dem_mat) render_camera(theta = 44, phi = 36, zoom = 0.7, fov = 50, shift_vertical = -30) render_snapshot() # Render the trees, using data from `baseline_tree` to draw each tree individually for(i in seq_len(nrow(baseline_tree))) {   single_tree_info = baseline_tree[i,]   tree_defaults = get_tree_data(single_tree_info$CrownType)   latlongheight = as.matrix(st_geometry(single_tree_info)[[1]])   render_tree(long = latlongheight[1], lat = latlongheight[2],                extent = ext(dem), heightmap = dem_mat,                tree_height = single_tree_info$Height,               crown_width = single_tree_info$Diameter,               trunk_height_ratio = tree_defaults$trunk_crown_ratio,               custom_obj_crown = get_crown_file(tree = single_tree_info$CrownType),               custom_obj_trunk = get_trunk_file()) } render_camera(40, 23,  0.25, 90) render_snapshot() render_tree(clear_previous = TRUE) for(i in seq_len(nrow(baseline_tree))) {   single_tree_info = baseline_tree[i,]   tree_defaults = get_tree_data(single_tree_info$CrownType)   latlongheight = as.matrix(st_geometry(single_tree_info)[[1]])   render_tree(long = latlongheight[1], lat = latlongheight[2],                extent = ext(dem), heightmap = dem_mat,                tree_height = single_tree_info$Height,               crown_width = single_tree_info$Diameter,               trunk_height_ratio = tree_defaults$trunk_crown_ratio,               custom_obj_crown = get_crown_file(tree = single_tree_info$CrownType,                                                 solid = TRUE),               custom_obj_trunk = get_trunk_file()) } render_camera(40, 23,  0.10, 90) render_snapshot() render_highquality(min_variance = 0,                    sample_method = \"sobol\",                    samples = 2048,                     lightaltitude = 30,                    lightdirection = 45) library(lidR) library(sf) library(terra)  #We will use the lidR package to generate a DEM and detect the crown tops of trees, and #then use rayshader to render 3D tree models scaled to those heights on the map. #Load the example data from the lidR package LASfile = system.file(\"extdata\", \"Topography.laz\", package=\"lidR\") las = lidR::readLAS(LASfile, filter = \"-inside 273450 5274350 273550 5274450\")  #Convert the lidar point data to a DEM and detect the location of trees from the same data dem = lidR::rasterize_terrain(las, algorithm = lidR::tin()) tree_top_data = lidR::locate_trees(las, lidR::lmf(ws = 5)) tree_locations = sf::st_coordinates(tree_top_data)  #Convert DEM to a matrix and extract the extent of the scene dem_matrix = raster_to_matrix(dem) dem_extent = terra::ext(dem) extent_values = dem_extent@ptr$vector  #Plot the ground dem_matrix |>   height_shade() |>   add_shadow(texture_shade(dem_matrix),0.2) |>   add_shadow(lamb_shade(dem_matrix),0) |>   plot_3d(dem_matrix, windowsize = 800, zscale = 2) render_snapshot() #Get tree data tree_df = tree3d::get_tree_data() tree_df #>          name solid_available trunk_color tree_color trunk_crown_ratio #> 1    columnar            TRUE     #8C6F5B    #A2C683         0.3333333 #> 2  pyramidal1            TRUE     #8C6F5B    #066038         0.1666667 #> 3  pyramidal2            TRUE     #8C6F5B    #447765         0.1666667 #> 4        oval            TRUE     #8C6F5B    #CBD362         0.3333333 #> 5        palm           FALSE     #8C6F5B    #CCB471         0.5000000 #> 6     rounded           FALSE     #8C6F5B    #7CB262         0.3333333 #> 7  spreading1            TRUE     #8C6F5B    #DB8952         0.3333333 #> 8  spreading2           FALSE     #8C6F5B    #E0A854         0.3333333 #> 9        vase           FALSE     #8C6F5B    #75C165         0.3333333 #> 10    weeping            TRUE     #8C6F5B    #AECCB1         0.3333333  set.seed(1) random_trees = tree_df[sample(1:10, nrow(tree_locations), replace=TRUE),] random_trees$solid_available = ifelse(random_trees$solid_available,                                        sample(c(TRUE,FALSE),1),                                       FALSE) head(random_trees) #>           name solid_available trunk_color tree_color trunk_crown_ratio #> 9         vase           FALSE     #8C6F5B    #75C165         0.3333333 #> 4         oval            TRUE     #8C6F5B    #CBD362         0.3333333 #> 7   spreading1            TRUE     #8C6F5B    #DB8952         0.3333333 #> 1     columnar            TRUE     #8C6F5B    #A2C683         0.3333333 #> 2   pyramidal1            TRUE     #8C6F5B    #066038         0.1666667 #> 7.1 spreading1            TRUE     #8C6F5B    #DB8952         0.3333333  render_camera(theta=45,phi=30,zoom=0.3,fov=90, shift_vertical = -10) for(i in seq_len(nrow(tree_locations))) {   trunk_ratio_single = tree_df$trunk_crown_ratio[which(tree_df$name == random_trees[i,1])]   render_tree(lat = tree_locations[i,2], long = tree_locations[i,1],               custom_obj_crown = get_crown_file(random_trees[i,1], resolution = \"high\",                                                 solid = random_trees[i,2]),               custom_obj_trunk = get_trunk_file(),               absolute_height = TRUE,                tree_height = tree_locations[i,3],               trunk_height_ratio = trunk_ratio_single,               crown_width_ratio = 0.75 + 0.25 * runif(1),               crown_color = random_trees[i,4],               angle = c(0,360*runif(1),0),               extent = dem,                zscale = 2,                heightmap = dem_matrix) } render_snapshot()"},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"3D Tree Models","text":"like acknowledge following people/organizations contributions package: elementslab (University British Columbia) supporting development 3D tree models","code":""},{"path":"/reference/get_crown_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a 3D Crown File — get_crown_file","title":"Get a 3D Crown File — get_crown_file","text":"Generate specific 3D representation tree crown, given parameters type tree crown, desired level detail resolution, whether offset crown align trunk origin.","code":""},{"path":"/reference/get_crown_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a 3D Crown File — get_crown_file","text":"","code":"get_crown_file(   tree = \"oval\",   resolution = \"medium\",   offset_origin = TRUE,   solid = FALSE )"},{"path":"/reference/get_crown_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a 3D Crown File — get_crown_file","text":"tree Default \"rounded\". Crown type. Full list options: \"columnar\" \"pyramidal1\" \"pyramidal2\" \"oval\" \"palm\" \"rounded\" \"spreading1\" \"spreading2\" \"vase\" \"weeping\" resolution Default \"medium\". Level detail tree mesh. options: \"low\" \"medium\" \"high offset_origin Default TRUE. Whether offset crown bottom tree exactly origin, aligning trunk. solid Default FALSE. Whether crown solid mesh (TRUE), collection flat 2D planes (FALSE).","code":""},{"path":"/reference/get_crown_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a 3D Crown File — get_crown_file","text":"Filename OBJ file (.txt file)","code":""},{"path":"/reference/get_crown_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a 3D Crown File — get_crown_file","text":"","code":"#Get a crown OBJ get_crown_file(tree = \"rounded\", resolution = \"high\") #> [1] \"/home/runner/work/_temp/Library/tree3d/extdata/highres/rounded_clean_offset.txt\""},{"path":"/reference/get_default_tree_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the default color for a tree — get_default_tree_color","title":"Get the default color for a tree — get_default_tree_color","text":"Get default color tree","code":""},{"path":"/reference/get_default_tree_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the default color for a tree — get_default_tree_color","text":"","code":"get_default_tree_color(crown_type)"},{"path":"/reference/get_default_tree_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the default color for a tree — get_default_tree_color","text":"crown_type Crown type. Full list options: \"columnar\" \"pyramidal1\" \"pyramidal2\" \"oval\" \"palm\" \"rounded\" \"spreading1\" \"spreading2\" \"vase\" \"weeping\"","code":""},{"path":"/reference/get_default_tree_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the default color for a tree — get_default_tree_color","text":"Hex color","code":""},{"path":"/reference/get_flat_crown_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Flat 3D Crown File — get_flat_crown_file","title":"Get a Flat 3D Crown File — get_flat_crown_file","text":"Generate specific 3D representation planar tree crown, given parameters type tree crown, desired level detail resolution, whether offset crown align trunk origin.","code":""},{"path":"/reference/get_flat_crown_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Flat 3D Crown File — get_flat_crown_file","text":"","code":"get_flat_crown_file(   tree = \"rounded\",   resolution = \"medium\",   offset_origin = TRUE )"},{"path":"/reference/get_flat_crown_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Flat 3D Crown File — get_flat_crown_file","text":"tree Default \"rounded\". Crown type. Full list options: \"columnar\" \"pyramidal1\" \"pyramidal2\" \"oval\" \"palm\" \"rounded\" \"spreading1\" \"spreading2\" \"vase\" \"weeping\" resolution Default \"medium\". Level detail tree mesh. options: \"low\" \"medium\" \"high offset_origin Default TRUE. Whether offset crown bottom tree exactly origin, aligning trunk.","code":""},{"path":"/reference/get_flat_crown_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Flat 3D Crown File — get_flat_crown_file","text":"Filename OBJ file (.txt file)","code":""},{"path":"/reference/get_flat_crown_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a Flat 3D Crown File — get_flat_crown_file","text":"","code":"#Load an arrow OBJ get_flat_crown_file(tree = \"rounded\", resolution = \"high\") #> [1] \"/home/runner/work/_temp/Library/tree3d/extdata/highres/rounded_clean_offset.txt\""},{"path":"/reference/get_solid_crown_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Solid 3D Crown File — get_solid_crown_file","title":"Get a Solid 3D Crown File — get_solid_crown_file","text":"Generate specific 3D representation tree crown, given parameters type tree crown, desired level detail resolution, whether offset crown align trunk origin.","code":""},{"path":"/reference/get_solid_crown_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Solid 3D Crown File — get_solid_crown_file","text":"","code":"get_solid_crown_file(   tree = \"oval\",   resolution = \"medium\",   offset_origin = TRUE )"},{"path":"/reference/get_solid_crown_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Solid 3D Crown File — get_solid_crown_file","text":"tree Default \"oval\". Crown type. Full list options: \"columnar\" \"pyramidal1\" \"pyramidal2\" \"oval\" \"spreading1\" \"weeping\" resolution Default \"medium\". Level detail tree mesh. options: \"low\" \"medium\" \"high offset_origin Default TRUE. Whether offset crown bottom tree exactly origin, aligning trunk.","code":""},{"path":"/reference/get_solid_crown_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Solid 3D Crown File — get_solid_crown_file","text":"Filename OBJ file (.txt file)","code":""},{"path":"/reference/get_solid_crown_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a Solid 3D Crown File — get_solid_crown_file","text":"","code":"#Load an arrow OBJ get_solid_crown_file(tree = \"oval\", resolution = \"high\") #> [1] \"/home/runner/work/_temp/Library/tree3d/extdata/highres/oval_crown_clean_offset.txt\""},{"path":"/reference/get_tree_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Tree Data — get_tree_data","title":"Get Tree Data — get_tree_data","text":"function retrieves data frame tree default data.","code":""},{"path":"/reference/get_tree_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Tree Data — get_tree_data","text":"","code":"get_tree_data(tree_name = NULL)"},{"path":"/reference/get_tree_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Tree Data — get_tree_data","text":"tree_name Default NULL. tree name, single tree's info needed. Otherwise, trees returned.","code":""},{"path":"/reference/get_tree_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Tree Data — get_tree_data","text":"Returns data frame.","code":""},{"path":"/reference/get_tree_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Tree Data — get_tree_data","text":"","code":"# Fetch the tree data frame. get_tree_data() #>          name solid_available trunk_color tree_color trunk_crown_ratio #> 1    columnar            TRUE     #8C6F5B    #A2C683         0.3333333 #> 2  pyramidal1            TRUE     #8C6F5B    #066038         0.1666667 #> 3  pyramidal2            TRUE     #8C6F5B    #447765         0.1666667 #> 4        oval            TRUE     #8C6F5B    #CBD362         0.3333333 #> 5        palm           FALSE     #8C6F5B    #CCB471         0.5000000 #> 6     rounded           FALSE     #8C6F5B    #7CB262         0.3333333 #> 7  spreading1            TRUE     #8C6F5B    #DB8952         0.3333333 #> 8  spreading2           FALSE     #8C6F5B    #E0A854         0.3333333 #> 9        vase           FALSE     #8C6F5B    #75C165         0.3333333 #> 10    weeping            TRUE     #8C6F5B    #AECCB1         0.3333333  # Get single tree get_tree_data(\"palm\") #>   name solid_available trunk_color tree_color trunk_crown_ratio #> 5 palm           FALSE     #8C6F5B    #CCB471               0.5"},{"path":"/reference/get_trunk_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Trunk File — get_trunk_file","title":"Get Trunk File — get_trunk_file","text":"function retrieves trunk OBJ file. trunk OBJ file can used create tree trunk 3D scene. function option scale trunk model based radius.","code":""},{"path":"/reference/get_trunk_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Trunk File — get_trunk_file","text":"","code":"get_trunk_file(scaled = TRUE, offset = TRUE)"},{"path":"/reference/get_trunk_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Trunk File — get_trunk_file","text":"scaled Default TRUE. parameter determines whether trunk model scaled radius 0.1 1. TRUE, trunk model scaled; otherwise, use original size. offset Default TRUE. parameter determines whether trunk model offset start origin, centered origin (FALSE).","code":""},{"path":"/reference/get_trunk_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Trunk File — get_trunk_file","text":"Returns filename selected OBJ file (.txt file) tree trunk. file can used create tree trunk models 3D scene.","code":""},{"path":"/reference/get_trunk_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Trunk File — get_trunk_file","text":"","code":"# Fetch an trunk OBJ path get_trunk_file() #> [1] \"/home/runner/work/_temp/Library/tree3d/extdata/trunk/trunk_clean_scaled_offset.txt\""},{"path":"/reference/run_documentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Documentation — run_documentation","title":"Run Documentation — run_documentation","text":"function determines examples run pkgdown. meant called user.","code":""},{"path":"/reference/run_documentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Documentation — run_documentation","text":"","code":"run_documentation()"},{"path":"/reference/run_documentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Documentation — run_documentation","text":"Boolean value.","code":""},{"path":"/reference/run_documentation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Documentation — run_documentation","text":"","code":"# See if the documentation should be run. run_documentation() #> [1] TRUE"},{"path":"/reference/tree_mesh.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Tree Mesh — tree_mesh","title":"Generate a Tree Mesh — tree_mesh","text":"function generates tree model transforms ray_mesh object OBJ file. tree model consists two main parts: crown (leafy part) trunk. parts can customized according range preset types, well full control tree's colors dimensions. tree model can positioned, scaled, rotated 3D space.","code":""},{"path":"/reference/tree_mesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Tree Mesh — tree_mesh","text":"","code":"tree_mesh(   crown_type = \"oval\",   position = c(0, 0, 0),   angle = 0,   solid = FALSE,   resolution = \"medium\",   filename = NULL,   tree_height = 1,   trunk_height_ratio = NULL,   crown_width_ratio = 1,   crown_height = NULL,   crown_width = NULL,   trunk_height = NULL,   trunk_width = NULL,   crown_color = NA,   trunk_color = \"#8C6F5B\",   diffuse_intensity = 1,   ambient_intensity = 0.2 )"},{"path":"/reference/tree_mesh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Tree Mesh — tree_mesh","text":"crown_type Default \"oval\". Crown type (leafy part tree). Full list options: position Default c(0,0,0). length-3 numeric vector specifying X, Y, Z coordinates tree mesh 3D space. angle Default 0. Amount rotation around y-axis tree. solid Default FALSE. Whether crown solid mesh (TRUE), collection flat 2D planes (FALSE). resolution Default \"medium\". String indicating level detail tree mesh. options: \"low\" \"medium\" \"high filename Default NULL. File name OBJ file, saving mesh local file. tree_height Default 1. numeric value setting total height tree. trunk_height_ratio Default NULL. numeric value specifying ratio trunk height total height tree. provided, default values tree type used. crown_width_ratio Default 1. numeric value specifying ratio crown width crown height. crown_height Default NULL. numeric value setting height crown. provided, calculated based tree height trunk height ratio. crown_width Default NULL. numeric value setting diameter crown. provided, calculated based crown height crown width ratio. trunk_height Default NULL. numeric value setting height trunk. provided, calculated based tree height trunk height ratio. trunk_width Default NULL. numeric value setting diameter trunk. provided, set 1/10th crown width. crown_color Default NA, use default crown type. string specifying hex code crown color. trunk_color Default \"#8C6F5B\". string specifying hex code trunk color. diffuse_intensity Default 1.0. numeric value controlling amount diffuse (shaded) color included model. ambient_intensity Default 0.2. numeric value controlling amount ambient (constant) color included model.","code":""},{"path":"/reference/tree_mesh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Tree Mesh — tree_mesh","text":"ray_mesh list object","code":""},{"path":"/reference/tree_mesh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Tree Mesh — tree_mesh","text":"","code":"#Load a tree and render it library(rayvertex) render_tree_example = function(example_tree_mesh) {  example_tree_mesh |>    add_shape(xz_rect_mesh(c(0,0,-9),                           material = material_list(diffuse=\"tan\",                           ambient = \"grey\", diffuse_intensity = 0.7,                           ambient_intensity = 0.6),                           scale=25)) |>    rasterize_scene(lookat=c(0,0.5,0),                    light_info = directional_light(c(0.3,1,1), intensity = 0.7),                    lookfrom=c(0,3,10),                    fov=8,                    shadow_map_dims = 2, shadow_map_bias = 0.0005,                    width = 800, height = 800,                    #fsaa = 4, ssao = TRUE, ssao_intensity = 1,                    background = \"lightblue\") } if(run_documentation()) { #Render a basic 3D crown tree_mesh(\"columnar\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { #Render the 2D planar version tree_mesh(\"columnar\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { #Adjust the trunk/crown proportions of the overall tree using ratios tree_mesh(\"columnar\",          tree_height = 1,          trunk_height_ratio = 1/5,          crown_width_ratio = 1.25,          trunk_width = 0.125,          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example()  }   if(run_documentation()) { #The crown width is set proportional to the crown height (not the overall tree) tree_mesh(\"columnar\",          tree_height = 1,          trunk_height_ratio = 2/3,          crown_width_ratio = 1,          trunk_width = 0.075,          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example() }   if(run_documentation()) { #Set the trunk and crown dimensions directly tree_mesh(\"columnar\",          trunk_height = 0.25,          trunk_width = 0.05,          crown_height = 0.75,          crown_width = 0.33,          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { #Change the crown and trunk color tree_mesh(\"columnar\",          solid = TRUE,          crown_color = \"orange\",          trunk_color = \"tan\",          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { #Render different tree types, both 2D and 3D versions tree_mesh(\"columnar\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"columnar\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"pyramidal1\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"pyramidal1\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"pyramidal2\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"pyramidal2\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"weeping\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"weeping\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"spreading1\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"spreading1\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"oval\",          solid = TRUE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"oval\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"palm\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"rounded\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"spreading2\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }  if(run_documentation()) { tree_mesh(\"vase\",          solid = FALSE,          ambient_intensity = 0.3) |>  render_tree_example() }"},{"path":"/reference/write_tree_to_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Tree to OBJ — write_tree_to_obj","title":"Write Tree to OBJ — write_tree_to_obj","text":"Export tree mesh OBJ file use 3D programs","code":""},{"path":"/reference/write_tree_to_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Tree to OBJ — write_tree_to_obj","text":"","code":"write_tree_to_obj(tree_mesh, filename, materials = TRUE, fileext = \".obj\")"},{"path":"/reference/write_tree_to_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Tree to OBJ — write_tree_to_obj","text":"tree_mesh Tree mesh. filename Filename OBJ file. file extension included, automatically added. materials Default TRUE. Whether also write material (MTL) file. fileext Default \".obj\". File extension added present.","code":""},{"path":"/reference/write_tree_to_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Tree to OBJ — write_tree_to_obj","text":"None","code":""},{"path":"/reference/write_tree_to_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Tree to OBJ — write_tree_to_obj","text":"","code":"#Save tree mesh to file tempfileloc = tempfile() write_tree_to_obj(tree_mesh(), filename = tempfileloc)"}]
